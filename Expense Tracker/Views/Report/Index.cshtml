@model IEnumerable<Expense_Tracker.Models.Transaction>
@using Expense_Tracker.Models

@{
    ViewData["Title"] = "Reports";
    var startDate = ViewData["startDate"] as DateTime?;
    var endDate = ViewData["endDate"] as DateTime?;
    var transactionType = ViewData["transactionType"] as string;
    var categoryId = ViewData["categoryId"] as int?;
    var categories = ViewBag.Categories as List<Category>;
}

<div class="container-fluid">
    <!-- Filter Accordion -->
    <div class="accordion mb-4" id="filterAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    <i class="fa-solid fa-filter me-2"></i> Filter Report
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#filterAccordion">
                <div class="accordion-body">
                    <form method="get" asp-action="Index">
                        <div class="row align-items-end g-3">
                            <div class="col-md-4">
                                <label class="form-label">Date Range</label>
                                <ejs-daterangepicker id="daterange" name="dateRange"
                                                     value="@(startDate.HasValue ? startDate.Value.ToShortDateString() + " - " + endDate.Value.ToShortDateString() : "")"
                                                     placeholder="Choose a date range"
                                                     format="MMM-dd-yy">
                                </ejs-daterangepicker>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Transaction Type</label>
                                <select name="transactionType" class="form-select" asp-for="@transactionType">
                                    <option value="All">All</option>
                                    <option value="Income">Income</option>
                                    <option value="Expense">Expense</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Category</label>
                                <select name="categoryId" class="form-select" asp-for="@categoryId">
                                    <option value="">All</option>
                                    @foreach (var cat in categories)
                                    {
                                        <option value="@cat.CategoryId" selected="@(cat.CategoryId == categoryId)">@cat.Title</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <button type="submit" class="btn btn-primary w-100">Apply Filter</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Summary Widgets -->
    <div class="row mb-4 g-4">
        <div class="col-md-4">
            <partial name="_SummaryWidget" model='("Total Income", (string)ViewBag.TotalIncome, "fa-circle-arrow-up")' />
        </div>
        <div class="col-md-4">
            <partial name="_SummaryWidget" model='("Total Expense", (string)ViewBag.TotalExpense, "fa-circle-arrow-down")' />
        </div>
        <div class="col-md-4">
            <partial name="_SummaryWidget" model='("Balance", (string)ViewBag.Balance, "fa-scale-balanced")' />
        </div>
    </div>

    <!-- Data Grid and Chart -->
    <div class="row g-4">
        <div class="col-md-7">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0"><i class="fa-solid fa-list-ul me-2"></i>Transactions</h5>
                </div>
                <div class="card-body">
                    <ejs-grid id="transactions" dataSource="@Model" gridLines="None"
                              allowSorting="true" allowPaging="true" toolbar="@(new List<string>() { "PdfExport" })"
                              allowPdfExport="true" toolbarClick="toolbarClick" height="350">
                        <e-grid-pagesettings pageSize="5"></e-grid-pagesettings>
                        <e-grid-columns>
                            <e-grid-column headerText="Category" field="Category.Title"></e-grid-column>
                            <e-grid-column headerText="Date" field="Date" width="110px"
                                           type="date" format="MMM-dd-yy" textAlign="Left"></e-grid-column>
                            <e-grid-column headerText="Type" template="#typeColumnTemplate" width="100px"></e-grid-column>
                            <e-grid-column headerText="Note" field="Note"></e-grid-column>
                            <e-grid-column headerText="Amount" field="FormattedAmount" textAlign="Right" width="110px"></e-grid-column>
                        </e-grid-columns>
                    </ejs-grid>
                </div>
            </div>
        </div>
        <div class="col-md-5">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0"><i class="fa-solid fa-chart-pie me-2"></i>Expense Breakdown</h5>
                </div>
                <div class="card-body">
                    <ejs-accumulationchart id="doughnutchart" enableSmartLabels background="transparent" height="350">
                        <e-accumulation-series-collection>
                            <e-accumulation-series dataSource="@ViewBag.DoughnutChartData"
                                                   xName="categoryTitleWithIcon" yName="amount"
                                                   innerRadius="60%" legendShape="Circle"
                                                   palettes=@(new string[]{"#0e8d76","#a4b219","#cb9b00","#8a442c","#0454b5","#7d0a0a","#822690","#4c2090","#313e93","#0096ac"})>
                                <e-accumulationseries-datalabel name="formattedAmount" visible></e-accumulationseries-datalabel>
                            </e-accumulation-series>
                        </e-accumulation-series-collection>
                        <e-accumulationchart-legendsettings position="Top" toggleVisibility="false">
                            <e-legendsettings-textstyle color="#fff" size="1rem"></e-legendsettings-textstyle>
                        </e-accumulationchart-legendsettings>
                        <e-accumulationchart-tooltipsettings enable></e-accumulationchart-tooltipsettings>
                    </ejs-accumulationchart>
                </div>
            </div>
        </div>
    </div>
</div>

<script id="typeColumnTemplate" type="text/x-template">
    ${if(Category.Type == "Income")}
        <span class="badge bg-success">Income</span>
    ${else}
        <span class="badge bg-danger">Expense</span>
    ${/if}
</script>

<script>
    function toolbarClick(args) {
        if (args.item.id === 'transactions_pdfexport') {
            var grid = document.getElementById("transactions").ej2_instances[0];
            var pdfFont = "@ViewBag.PdfFont";
            var exportProperties = {};

            if (pdfFont) {
                exportProperties = {
                    theme: {
                        header: { font: new ej.pdfexport.PdfTrueTypeFont(pdfFont, 12), fontColor: '#ffffff' },
                        caption: { font: new ej.pdfexport.PdfTrueTypeFont(pdfFont, 10) },
                        record: { font: new ej.pdfexport.PdfTrueTypeFont(pdfFont, 9) }
                    }
                };
            }
            
            grid.pdfExport(exportProperties);
        }
    }
</script> 